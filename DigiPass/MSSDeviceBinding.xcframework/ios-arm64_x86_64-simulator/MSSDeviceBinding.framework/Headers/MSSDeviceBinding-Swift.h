#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef MSSDEVICEBINDING_SWIFT_H
#define MSSDEVICEBINDING_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MSSDeviceBinding",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

/// Provides a way to define how different apps of your own can access a fingerprint.
/// You can create your own object conforming to this protocol or use one of the following models:
/// <code>AppPrivate</code>, <code>AppGroup</code> and <code>KeychainSharingGroup</code>
/// <blockquote>
/// Important: Once a fingerprint is created with a certain <code>MSSDeviceBinding/AccessGroup</code>, it is impossible to modify the access group for that fingerprint.
///
/// </blockquote>
/// <blockquote>
/// Important: Using the same Salt with different access groups, will result in different fingerprints. It means that you can share the fingerprint with only one group of your Apps.
///
/// </blockquote>
/// <blockquote>
/// Tip: Each one of your Apps can be part of many groups. Create the same group in all of your Apps interested to access the shared fingerprint and use that group with this SDK.
///
/// </blockquote>
SWIFT_PROTOCOL("_TtP16MSSDeviceBinding11AccessGroup_")
@protocol AccessGroup
/// A string representation of the <code>AccessGroup</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@end


/// Accessible in the App and shared through  App Group containers.
/// Any fingerprint generated in this <code>AccessGroup</code> is  available to any App being part of the same App group container.
/// <blockquote>
/// Important: In order to use this access group, the <em>App Groups</em> capability must be added to your App.
///
/// </blockquote>
SWIFT_CLASS("_TtC16MSSDeviceBinding8AppGroup")
@interface AppGroup : NSObject <AccessGroup>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an instance of <code>AppGroup</code> model conforming to <code>AccessGroup</code> protocol.
/// \param appGroup One of the groups available in App groups. You can find the list of available groups by going to <em>Signing & Capabilities > App Groups</em> of your app target. You can also find this value in the <em>entitlements</em> file of your App target.
///
- (nonnull instancetype)initWithAppGroup:(NSString * _Nonnull)appGroup OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Accessible only in the App.
/// Any fingerprint generated in this <code>AccessGroup</code> is only available to the App Sandbox.
SWIFT_CLASS("_TtC16MSSDeviceBinding10AppPrivate")
@interface AppPrivate : NSObject <AccessGroup>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an instance of <code>AppPrivate</code> model conforming to <code>AccessGroup</code> protocol.
/// \param teamId The key for this value is <em>DEVELOPMENT_TEAM</em>. You can find this value by going to <em>Build Settings > Signing > Development Team</em> (ex: PS861PAMJ9.) You can also find this value by logging into Apple developer website.
///
/// \param bundleId The key for this value is <em>PRODUCT_BUNDLE_IDENTIFIER</em>. You can find this value in the General tap of you App target.
///
- (nonnull instancetype)initWithTeamId:(NSString * _Nonnull)teamId bundleId:(NSString * _Nonnull)bundleId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides the possibility to generate and remove device fingerprints.
SWIFT_PROTOCOL("_TtP16MSSDeviceBinding13DeviceBinding_")
@protocol DeviceBinding
/// Returns the current version of  <code>MSSDeviceBinding</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
- (NSString * _Nullable)fingerprintForStaticSalt:(NSString * _Nonnull)staticSalt inAccessGroup:(id <AccessGroup> _Nonnull)accessGroup error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use fingerprint(forSalt:in:) instead.");
/// Returns a device fingerprint diversified by using a salt.
/// This method is responsible for generating and/or returning an existing unique fingerprint for the device.
/// Device fingerprints are diversified by the salt passed to the method.
/// \param salt A string to be included in the device fingerprint computation process.
///
/// \param accessGroup Specifies the <code>AccessGroup</code> to be used for saving/retrieving the fingerprint.
///
///
/// throws:
/// An error of type <code>DeviceBindingError</code>  in case of an error happening when getting the fingerprint.
///
/// returns:
/// A 64 hexadecimal characters uniquely identifying the iOS device.
- (NSString * _Nullable)fingerprintForSalt:(NSString * _Nonnull)salt inAccessGroup:(id <AccessGroup> _Nonnull)accessGroup error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Clears everything in the specified <code>AccessGroup</code>.
/// A call to this method will clear all fingerprints, Keychain and SecureEnclave entries for the provided <code>AccessGroup</code>.
/// The next time a call to <code>fingerprint(forSalt:in:)</code> is made, the result will be a <em>new and different</em> fingerprint, even if the same parameters are being passed.
/// <blockquote>
/// Warning: <em>This operation cannot be undone.</em>
///
/// </blockquote>
/// \param accessGroup Specifies the <code>AccessGroup</code> in which all entries will be cleared.
///
///
/// throws:
/// An error of type <code>DeviceBindingError</code>  If an error occurs when deleting the fingerprint.
- (BOOL)resetInAccessGroup:(id <AccessGroup> _Nonnull)accessGroup error:(NSError * _Nullable * _Nullable)error;
@end

/// Provides an error codes for each case of <code>DeviceBindingError</code>.
/// <blockquote>
/// Important: The following constants are meant to be used only in Objective-C integrations.
///
/// </blockquote>
typedef SWIFT_ENUM(NSInteger, DeviceBindingErrorCodes, open) {
/// The desired <code>AccessGroup</code> is not accessible.
  DeviceBindingErrorCodesAccessGroupNotAccessible = -4499,
/// An Internal SDK error has occurred.
  DeviceBindingErrorCodesInternalError = -4400,
/// Keychain not available at the moment.
  DeviceBindingErrorCodesDataLocked = -4401,
};


/// Used to build an instance conforming to <code>DeviceBinding</code> protocol.
SWIFT_CLASS("_TtC16MSSDeviceBinding16DeviceBindingSDK")
@interface DeviceBindingSDK : NSObject
/// Builds and returns a new instance of DeviceBinding
///
/// returns:
/// An instance conforming to <code>DeviceBinding</code> protocol.
+ (id <DeviceBinding> _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Accessible in the App and shared through Keychain sharing groups.
/// Any fingerprint generated in this <code>AccessGroup</code> is  available to other Apps created by your team and being part of the same keychain sharing group.
/// <blockquote>
/// Important: In order to use this access group, the <em>Keychain Sharing</em> capability must be added to your App.
///
/// </blockquote>
SWIFT_CLASS("_TtC16MSSDeviceBinding20KeychainSharingGroup")
@interface KeychainSharingGroup : NSObject <AccessGroup>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an instance of <code>KeychainSharingGroup</code> model conforming to <code>AccessGroup</code> protocol.
/// \param teamId The key for this value is <em>DEVELOPMENT_TEAM</em>. You can find this value by going to <em>Build Settings > Signing > Development Team</em> (ex: PS861PAMJ9.) You can also find this value by logging into Apple developer website.
///
/// \param keychainSharingGroup One of the groups available in Keychain groups. You can find the list of available groups or create a new one by going to <em>Signing & Capabilities > Keychain Sharing</em> of your app target.
///
- (nonnull instancetype)initWithTeamId:(NSString * _Nonnull)teamId keychainSharingGroup:(NSString * _Nonnull)keychainSharingGroup OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef MSSDEVICEBINDING_SWIFT_H
#define MSSDEVICEBINDING_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MSSDeviceBinding",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

/// Provides a way to define how different apps of your own can access a fingerprint.
/// You can create your own object conforming to this protocol or use one of the following models:
/// <code>AppPrivate</code>, <code>AppGroup</code> and <code>KeychainSharingGroup</code>
/// <blockquote>
/// Important: Once a fingerprint is created with a certain <code>MSSDeviceBinding/AccessGroup</code>, it is impossible to modify the access group for that fingerprint.
///
/// </blockquote>
/// <blockquote>
/// Important: Using the same Salt with different access groups, will result in different fingerprints. It means that you can share the fingerprint with only one group of your Apps.
///
/// </blockquote>
/// <blockquote>
/// Tip: Each one of your Apps can be part of many groups. Create the same group in all of your Apps interested to access the shared fingerprint and use that group with this SDK.
///
/// </blockquote>
SWIFT_PROTOCOL("_TtP16MSSDeviceBinding11AccessGroup_")
@protocol AccessGroup
/// A string representation of the <code>AccessGroup</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@end


/// Accessible in the App and shared through  App Group containers.
/// Any fingerprint generated in this <code>AccessGroup</code> is  available to any App being part of the same App group container.
/// <blockquote>
/// Important: In order to use this access group, the <em>App Groups</em> capability must be added to your App.
///
/// </blockquote>
SWIFT_CLASS("_TtC16MSSDeviceBinding8AppGroup")
@interface AppGroup : NSObject <AccessGroup>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an instance of <code>AppGroup</code> model conforming to <code>AccessGroup</code> protocol.
/// \param appGroup One of the groups available in App groups. You can find the list of available groups by going to <em>Signing & Capabilities > App Groups</em> of your app target. You can also find this value in the <em>entitlements</em> file of your App target.
///
- (nonnull instancetype)initWithAppGroup:(NSString * _Nonnull)appGroup OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Accessible only in the App.
/// Any fingerprint generated in this <code>AccessGroup</code> is only available to the App Sandbox.
SWIFT_CLASS("_TtC16MSSDeviceBinding10AppPrivate")
@interface AppPrivate : NSObject <AccessGroup>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an instance of <code>AppPrivate</code> model conforming to <code>AccessGroup</code> protocol.
/// \param teamId The key for this value is <em>DEVELOPMENT_TEAM</em>. You can find this value by going to <em>Build Settings > Signing > Development Team</em> (ex: PS861PAMJ9.) You can also find this value by logging into Apple developer website.
///
/// \param bundleId The key for this value is <em>PRODUCT_BUNDLE_IDENTIFIER</em>. You can find this value in the General tap of you App target.
///
- (nonnull instancetype)initWithTeamId:(NSString * _Nonnull)teamId bundleId:(NSString * _Nonnull)bundleId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides the possibility to generate and remove device fingerprints.
SWIFT_PROTOCOL("_TtP16MSSDeviceBinding13DeviceBinding_")
@protocol DeviceBinding
/// Returns the current version of  <code>MSSDeviceBinding</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
- (NSString * _Nullable)fingerprintForStaticSalt:(NSString * _Nonnull)staticSalt inAccessGroup:(id <AccessGroup> _Nonnull)accessGroup error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use fingerprint(forSalt:in:) instead.");
/// Returns a device fingerprint diversified by using a salt.
/// This method is responsible for generating and/or returning an existing unique fingerprint for the device.
/// Device fingerprints are diversified by the salt passed to the method.
/// \param salt A string to be included in the device fingerprint computation process.
///
/// \param accessGroup Specifies the <code>AccessGroup</code> to be used for saving/retrieving the fingerprint.
///
///
/// throws:
/// An error of type <code>DeviceBindingError</code>  in case of an error happening when getting the fingerprint.
///
/// returns:
/// A 64 hexadecimal characters uniquely identifying the iOS device.
- (NSString * _Nullable)fingerprintForSalt:(NSString * _Nonnull)salt inAccessGroup:(id <AccessGroup> _Nonnull)accessGroup error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Clears everything in the specified <code>AccessGroup</code>.
/// A call to this method will clear all fingerprints, Keychain and SecureEnclave entries for the provided <code>AccessGroup</code>.
/// The next time a call to <code>fingerprint(forSalt:in:)</code> is made, the result will be a <em>new and different</em> fingerprint, even if the same parameters are being passed.
/// <blockquote>
/// Warning: <em>This operation cannot be undone.</em>
///
/// </blockquote>
/// \param accessGroup Specifies the <code>AccessGroup</code> in which all entries will be cleared.
///
///
/// throws:
/// An error of type <code>DeviceBindingError</code>  If an error occurs when deleting the fingerprint.
- (BOOL)resetInAccessGroup:(id <AccessGroup> _Nonnull)accessGroup error:(NSError * _Nullable * _Nullable)error;
@end

/// Provides an error codes for each case of <code>DeviceBindingError</code>.
/// <blockquote>
/// Important: The following constants are meant to be used only in Objective-C integrations.
///
/// </blockquote>
typedef SWIFT_ENUM(NSInteger, DeviceBindingErrorCodes, open) {
/// The desired <code>AccessGroup</code> is not accessible.
  DeviceBindingErrorCodesAccessGroupNotAccessible = -4499,
/// An Internal SDK error has occurred.
  DeviceBindingErrorCodesInternalError = -4400,
/// Keychain not available at the moment.
  DeviceBindingErrorCodesDataLocked = -4401,
};


/// Used to build an instance conforming to <code>DeviceBinding</code> protocol.
SWIFT_CLASS("_TtC16MSSDeviceBinding16DeviceBindingSDK")
@interface DeviceBindingSDK : NSObject
/// Builds and returns a new instance of DeviceBinding
///
/// returns:
/// An instance conforming to <code>DeviceBinding</code> protocol.
+ (id <DeviceBinding> _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Accessible in the App and shared through Keychain sharing groups.
/// Any fingerprint generated in this <code>AccessGroup</code> is  available to other Apps created by your team and being part of the same keychain sharing group.
/// <blockquote>
/// Important: In order to use this access group, the <em>Keychain Sharing</em> capability must be added to your App.
///
/// </blockquote>
SWIFT_CLASS("_TtC16MSSDeviceBinding20KeychainSharingGroup")
@interface KeychainSharingGroup : NSObject <AccessGroup>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an instance of <code>KeychainSharingGroup</code> model conforming to <code>AccessGroup</code> protocol.
/// \param teamId The key for this value is <em>DEVELOPMENT_TEAM</em>. You can find this value by going to <em>Build Settings > Signing > Development Team</em> (ex: PS861PAMJ9.) You can also find this value by logging into Apple developer website.
///
/// \param keychainSharingGroup One of the groups available in Keychain groups. You can find the list of available groups or create a new one by going to <em>Signing & Capabilities > Keychain Sharing</em> of your app target.
///
- (nonnull instancetype)initWithTeamId:(NSString * _Nonnull)teamId keychainSharingGroup:(NSString * _Nonnull)keychainSharingGroup OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
