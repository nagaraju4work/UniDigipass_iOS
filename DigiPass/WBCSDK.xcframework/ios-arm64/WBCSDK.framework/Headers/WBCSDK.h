
#ifndef WBCSDK_H_
#define WBCSDK_H_

#include <string>
#include <WBCSDK/WBCSDKTables.h>
#include "WBCSDKUtils.h"

using namespace std;

namespace com
{
namespace vasco
{
namespace digipass
{
namespace sdk
{
namespace utils
{
namespace wbc
{

/** Version of the WBC SDK */
const static string VERSION = "4.26.3";

/**
 * This class provides a method to encrypt and decrypt data using the whitebox cryptography. It encrypts/decrypts data using AES CTR mode.
 */
class WBCSDK
{
public:

    /**
     * This method encrypts data using White Box Cryptography.
     * @param   mechanism Cipher mechanism ({@link WBCSDKConstants::CRYPTO_MECHANISM_AES} only supported).
     * @param   mode Cipher mode ({@link WBCSDKConstants::CRYPTO_MODE_CTR} only supported).
     * @param   wbcTables WBCSDKTables object generated by the WBCSDKTableGenerator tool. Contains all tables used for encryption. Cannot be null.
     * @param   initialVector Byte array containing the initial vector. Initial vector used for the CTR modes, mandatory.
     * @param   initialVectorLength Initial vector length. For {@link WBCSDKConstants::CRYPTO_MECHANISM_AES} and 
     * {@link WBCSDKConstants::CRYPTO_MODE_CTR}, it must be 16 bytes long.
     * @param   dataIn Byte array containing clear data to be encrypted. Cannot be null or empty.
     * @param   dataInLength Length of clear data byte array.
     * @param   dataOut Output byte array containing the encrypted data. Cannot be null or empty.
     * @param   dataOutLength Length of encrypted data byte array. This length will be updated with actual encrypted data length after execution.
     * @throws WBCSDKException If there is an error during the process.
     * The exception can contain one of the following error codes:
     * <ul>
     *  <li>{@link WBCSDKErrorCodes::WBCSDK_TABLES_INVALID} if White box tables are null or invalid.</li>
     *  <li>{@link WBCSDKErrorCodes::CRYPTO_MECHANISM_INVALID} if crypto mechanism is invalid.</li>
     *  <li>{@link WBCSDKErrorCodes::CRYPTO_MODE_INVALID} if crypto mode is invalid.</li>
     *  <li>{@link WBCSDKErrorCodes::INITIAL_VECTOR_NULL} if initial vector is null.</li>
     *  <li>{@link WBCSDKErrorCodes::INITIAL_VECTOR_INCORRECT_LENGTH} if initial vector has an incorrect length.</li>
     *  <li>{@link WBCSDKErrorCodes::INPUT_DATA_NULL} if input data is null.</li>
     *  <li>{@link WBCSDKErrorCodes::INPUT_DATA_INCORRECT_LENGTH} if input data length is incorrect.</li>
     *  <li>{@link WBCSDKErrorCodes::OUTPUT_DATA_NULL} if output data has an incorrect length.</li>
     *  <li>{@link WBCSDKErrorCodes::OUTPUT_DATA_INCORRECT_LENGTH} if output data is null.</li>
     *  <li>{@link WBCSDKErrorCodes::INTERNAL_ERROR} if an internal error occurred.</li>
     * </ul>
     */

    static void encrypt(const unsigned char mechanism, const unsigned char mode, WBCSDKTables *wbcTables,
            unsigned char* initialVector, vds_int32 initialVectorLength, unsigned char* dataIn,
                        vds_int32 dataInLength, unsigned char* dataOut, vds_int32 *dataOutLength);

    /**
     * This method decrypts data using White Box Cryptography.
     * @param   mechanism Cipher mechanism ({@link WBCSDKConstants::CRYPTO_MECHANISM_AES} only supported).
     * @param   mode Cipher mode ({@link WBCSDKConstants::CRYPTO_MODE_CTR} only supported)
     * @param   wbcTables WBCSDKTables object generated by the WBCSDKTableGenerator tool. Contains all tables used for decryption. Cannot be null.
     * @param   initialVector Byte array containing the initial vector. Initial vector used for the CTR modes, mandatory.
     * @param   initialVectorLength Initial vector length. For {@link WBCSDKConstants::CRYPTO_MECHANISM_AES} and 
     * {@link WBCSDKConstants::CRYPTO_MODE_CTR}, it must be 16 bytes long.
     * @param   dataIn Byte array containing encrypted data to be decrypted. Cannot be null or empty.
     * @param   dataInLength Length of encrypted byte array.
     * @param   dataOut Output byte array containing the clear data. Cannot be null or empty.
     * @param   dataOutLength Length of clear data byte array. This length will be updated with actual clear data length after execution.
     * @throws WBCSDKException If there is an error during the process.
     * The exception can contain one of the following error codes:
     * <ul>
     *  <li>{@link WBCSDKErrorCodes::WBCSDK_TABLES_INVALID} if White box tables are null or invalid.</li>
     *  <li>{@link WBCSDKErrorCodes::CRYPTO_MECHANISM_INVALID} if crypto mechanism is invalid.</li>
     *  <li>{@link WBCSDKErrorCodes::CRYPTO_MODE_INVALID} if crypto mode is invalid.</li>
     *  <li>{@link WBCSDKErrorCodes::INITIAL_VECTOR_NULL} if initial vector is null.</li>
     *  <li>{@link WBCSDKErrorCodes::INITIAL_VECTOR_INCORRECT_LENGTH} if initial vector has an incorrect length.</li>
     *  <li>{@link WBCSDKErrorCodes::INPUT_DATA_NULL} if input data is null.</li>
     *  <li>{@link WBCSDKErrorCodes::INPUT_DATA_INCORRECT_LENGTH} if input data length is incorrect.</li>
     *  <li>{@link WBCSDKErrorCodes::OUTPUT_DATA_NULL} if output data has an incorrect length.</li>
     *  <li>{@link WBCSDKErrorCodes::OUTPUT_DATA_INCORRECT_LENGTH} if output data is null.</li>
     *  <li>{@link WBCSDKErrorCodes::INTERNAL_ERROR} if an internal error occurred.</li>
     * </ul>
     */
    static void decrypt(const unsigned char mechanism, const unsigned char mode, WBCSDKTables *wbcTables,
            unsigned char * initialVector, vds_int32 initialVectorLength, unsigned char * dataIn, vds_int32 dataInLength,
            unsigned char * dataOut, vds_int32 *dataOutLength);

};

}
}
}
}
}
}

#endif /* WBCSDK_H_ */
