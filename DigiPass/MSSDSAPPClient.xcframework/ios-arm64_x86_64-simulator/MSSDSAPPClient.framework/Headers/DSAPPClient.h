//////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) since 1999. VASCO DATA SECURITY
//  All rights reserved. http://www.vasco.com
//
//////////////////////////////////////////////////////////////////////////////

#ifndef DSAPPCLIENT_H_
#define DSAPPCLIENT_H_

#include <string>
using namespace std;

typedef unsigned char byte;

// Note: Do not convert these imports to angle-brackets because build.gradle file does it when it is building for iOS.
#include "DSAPPException.h"
#include "DecryptActivationDataResponse.h"
#include "GenerateSessionKeyResponse.h"
#include "InitializeRegistrationDataResponse.h"
#include "InitializeProtocolResponse.h"
#include "SRPClientEphemeralKeyResponse.h"
#include "SRPSessionKeyResponse.h"

const string DSAPPClient_VERSION = "4.29.0";

// Obfuscation
#ifndef _DOC
#define initializeProtocol(...) PpMMESssQXLLYrTJjETO(__VA_ARGS__)
#define generateSessionKey(...) fCEyfEgaQclZJrJYxotG(__VA_ARGS__)
#define decryptData(...) mWAusdFhQvCzPhkpkMuy(__VA_ARGS__)
#define initializeRegistrationDataV2(...) dAHBlYTxdzUUFwuuBIMj(__VA_ARGS__)
#define initializeRegistrationData(...) DIjtSGYBsebZUsgEhjcc(__VA_ARGS__)
#define initializeRegistrationDataV1(...) sIsnyaZspibjAXUxLCDF(__VA_ARGS__)
#define decryptActivationData(...) sFilcnbJJKgbGCVZjWWl(__VA_ARGS__)
#define validateSharedDataChecksum(...) ROWBOMuPGIpmZzmnIbPm(__VA_ARGS__)
#define validateSharedDataChecksumV1(...) cVMPFztNsvVfphPbRJkK(__VA_ARGS__)
#define validateSharedDataChecksumV2(...) hClowdtPiumdOHfhPwYZ(__VA_ARGS__)
#define validateSRPUserPasswordChecksum(...) TucnYUxVdmxSORjtbkwt(__VA_ARGS__)
#define generateSRPClientEphemeralKey(...) sDgIwTFcpTcrwkfUkAAR(__VA_ARGS__)
#define generateSRPSessionKey(...) YFmuXIeTTCWnjdGFwsbh(__VA_ARGS__)
#define verifySRPServerEvidenceMessage(...) eYaBNCKOYDBPsMAeEyyI(__VA_ARGS__)
#define decryptSRPData(...) JSdIHXFbLsLJgdpUQmWO(__VA_ARGS__)
#define verifySRPMAC(...) eQLELDYQkOSlTkeCNJNy(__VA_ARGS__)
#endif

/**
 * Provides the entry points of the DSAPP client library:
 * <ul>
 *  <li>validation of the checksum of the shared secret (e.g. activation password or authorization code);</li>
 *  <li>initialization of the protocol by generating required data from the shared secret received from the server;</li>
 *  <li>generation of the session key;</li>
 *  <li>decryption of encrypted data;</li>
 *  <li>validation of MAC received from the server.</li>
 * </ul>
 * <br/>The following sequence diagram describes the integration of the DSAPP:<br/><br/>
 * \image html DSAPP_sequence_diagram.png
 */
class DSAPPClient
{

public:

    /**
     * The transfered data are protected by an asymmetric key encryption mechanism.<br/>
     * Prior to be able to decrypt data, the client application must provide server with data required to generate the session key and encrypt the data:
     * <ul>
     *  <li>the client public key and nonce;</li>
     *  <li>the initial vector diversifying the encryption.</li>
     * </ul>
     * These data, and those that must to be kept on client side, are generated by this method thanks to the shared secret which has been issued by the server.
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param sharedSecret Shared secret. Alphanumeric string limited to {@link DSAPPConstants_SHARED_DATA_MAX_LENGTH} characters.
     * @param response A response object that contains:
     * <ul>
     *  <li>The encrypted concatenation of the client public key and the client nonce. ({@link DSAPPConstants_PUBLIC_KEY_LENGTH} + {@link DSAPPConstants_NONCE_LENGTH}) hexadecimal characters. Must be sent to the server.</li>
     *  <li>The initial vector used for public key encryption. {@link DSAPPConstants_INITIAL_VECTOR_LENGTH} hexadecimal string. Must be sent to the server.</li>
     *  <li>The key derived from the shared secret. {@link DSAPPConstants_CHS_KEY_LENGTH} hexadecimal string. Must be stored on the client side and used for the data decryption.</li>
     *  <li>The client private key used for session key calculation. {@link DSAPPConstants_PRIVATE_KEY_LENGTH} hexadecimal string. Must be stored on the client side and used for the data decryption.</li>
     *  <li>The client nonce that will be verified against the one received from the server. {@link DSAPPConstants_NONCE_LENGTH} hexadecimal string. Must be stored on the client side and used for the data decryption.</li>
     * </ul>
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SHARED_SECRET_TOO_LONG}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */

    static void initializeProtocol(string sharedSecret, InitializeProtocolResponse& response);
    /**
     * The data are received encrypted with the session key.<br/>
     * This session key must be locally generated in order to be able to decrypt the data.<br/>
     * NOTE: DSAPPErrorCodes#CHECK_NONCE_ERROR error occured when the decryption of activation data is not done correctly. 
     * It might be due to a different shared secret between server and client.<br/>
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param chsKey Key derived from the shared secret. Must be a {@link DSAPPConstants_CHS_KEY_LENGTH} hexadecimal string.
     * @param clientPrivateKey Client private key used for session key calculation. Must be a {@link DSAPPConstants_PRIVATE_KEY_LENGTH} hexadecimal string.
     * @param encryptedServerPublicKey Server public key encrypted with chsKey. Must be a {@link DSAPPConstants_PUBLIC_KEY_LENGTH} hexadecimal string.
     * @param encryptedNonces Concatenation of the server and client nonces encrypted with the chsKey. Must be a {@link DSAPPConstants_ENCRYPTED_NONCES_LENGTH} hexadecimal string.
     * @param clientNonce Client nonce. Must be a {@link DSAPPConstants_NONCE_LENGTH} hexadecimal string.
     * @param serverInitialVector Server initial vector used for data decryption. Must be a {@link DSAPPConstants_INITIAL_VECTOR_LENGTH} hexadecimal string.
     * @param response A response object that contains:
     * <ul>
     *  The session key. {@link DSAPPConstants_SESSION_KEY_LENGTH} hexadecimal string. Must be stored on the client side and used to decrypt data.</li>
     *  <li>The Event reactivation counter. Must be used to activate the DIGIPASS.</li>
     *  <li>The server nonce encrypted with the session key. {@link DSAPPConstants_ENCRYPTED_SERVER_NONCE_LENGTH} hexadecimal string. Must be sent to the server for the server nonce validation.</li>
     * </ul>
     *
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_CHS_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_CHS_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_CHS_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_PRIVATE_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_PRIVATE_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_PRIVATE_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_SERVER_PUBLIC_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_SERVER_PUBLIC_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_SERVER_PUBLIC_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_NONCES_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_NONCES_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_NONCES_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_NONCE_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_NONCE_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_NONCE_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SERVER_INITIAL_VECTOR_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SERVER_INITIAL_VECTOR_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SERVER_INITIAL_VECTOR_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_CHECK_NONCE_ERROR}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     **/
    static void generateSessionKey(string chsKey, string clientPrivateKey, string encryptedServerPublicKey,
            string encryptedNonces, string clientNonce, string serverInitialVector, GenerateSessionKeyResponse& response);

    /**
     * Decrypt the received data which are encrypted with the session key.
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param encryptedData Data encrypted with the session key. Must be a hexadecimal string.
     * @param sessionKey Session key used to encrypt data.  Must be a {@link DSAPPConstants_SESSION_KEY_LENGTH} hexadecimal string.
     * @param serverInitialVector Server initial vector used for data decryption. Must be a {@link DSAPPConstants_INITIAL_VECTOR_LENGTH} hexadecimal string.
     * @param decryptedData decrypted data buffer. A non-null byte array that receives the decrypted data.
     * @param decryptedDataBufferLength The size of the decrypted data buffer. Address of an int that contains on input the allocated size of the decrypted data buffer and receives on output the length of the decrypted data. If there is not enough space in the buffer to store the decrypted data, the function throws an exception with error code DSAPPErrorCodes_DECRYPTED_DATA_NULL.
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SESSION_KEY__NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SESSION_KEY__INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SESSION_KEY__INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_DATA_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_DATA_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SERVER_INITIAL_VECTOR_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SERVER_INITIAL_VECTOR_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SERVER_INITIAL_VECTOR_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_DECRYPTED_DATA_NULL}</li>
     *  <li>{@link DSAPPErrorCodes_DECRYPTED_DATA_LENGTH_NULL}</li>
     *  <li>{@link DSAPPErrorCodes_DECRYPTED_DATA_LENGTH_TOO_SMALL}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     **/
    static void decryptData(string encryptedData, string sessionKey, string serverInitialVector, byte* decryptedData, int* decryptedDataBufferLength);

    /**
     * The DIGIPASS activation data is protected by an asymmetric key encryption mechanism.<br/>
     * Prior to get the DIGIPASS activation data, the client application must provide the data required to protect the activation data:
     * <ul>
     *  <li>The client public key and nonce.</li>
     *  <li>The initial vector diversifying the encryption.</li>
     * </ul>
     *
     * CAUTION: This method must be used to initialize the registration data for DSAPP SDK 4.1+ and DIGIPASS for Mobile 4.1+<br/>
     * For DSAPP SDK 4.0 and DIGIPASS for Mobile 4.0, use {@link DSAPPClient#initializeRegistrationDataV1}.<br/>
     * CAUTION: Since DSAPP SDK 4.4, it is preferable to use {@link DSAPPClient#generateSessionKey} and {@link DSAPPClient#decryptData}.
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param activationPassword Activation password. Alphanumeric string limited to {@link DSAPPConstants_SHARED_DATA_MAX_LENGTH} characters.
     * @param response A response object that contains:
     * <ul>
     *  <li>The encrypted concatenation of the client public key and the client nonce. ({@link DSAPPConstants_PUBLIC_KEY_LENGTH} + {@link DSAPPConstants_NONCE_LENGTH}) hexadecimal characters. Must be sent to the server.</li>
     *  <li>The initial vector used for public key encryption. {@link DSAPPConstants_INITIAL_VECTOR_LENGTH} hexadecimal string. Must be sent to the server.</li>
     *  <li>The key derived from the activation password. {@link DSAPPConstants_CHS_KEY_LENGTH} hexadecimal string. Must be stored on the client side and used for the activation data decryption.</li>
     *  <li>The client private key used for session key calculation. {@link DSAPPConstants_PRIVATE_KEY_LENGTH} hexadecimal string. Must be stored on the client side and used for the activation data decryption.</li>
     *  <li>The client nonce that will be verified against the one received from the server. {@link DSAPPConstants_NONCE_LENGTH} hexadecimal string. Must be stored on the client side and used for the activation data decryption.</li>
     * </ul>
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_ACTIVATION_PASSWORD_TOO_LONG}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void initializeRegistrationDataV2(string activationPassword, InitializeRegistrationDataResponse& response);

    /**
     * The DIGIPASS activation data is protected by an asymmetric key encryption mechanism.<br/>
     * Prior to get the DIGIPASS activation data, the client application must provide the data required to protect the activation data:
     * <ul>
     *  <li>The client public key and nonce.</li>
     *  <li>The initial vector diversifying the encryption.</li>
     * </ul>
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param activationPassword Activation password. Alphanumeric string limited to {@link DSAPPConstants_SHARED_DATA_MAX_LENGTH} characters.
     * @param response A response object that contains:
     * <ul>
     *  <li>The encrypted concatenation of the client public key and the client nonce. ({@link DSAPPConstants_PUBLIC_KEY_LENGTH} + {@link DSAPPConstants_NONCE_LENGTH}) hexadecimal characters. Must be sent to the server.</li>
     *  <li>The initial vector used for public key encryption. {@link DSAPPConstants_INITIAL_VECTOR_LENGTH} hexadecimal string. Must be sent to the server.</li>
     *  <li>The key derived from the activation password. {@link DSAPPConstants_CHS_KEY_LENGTH} hexadecimal string. Must be stored on the client side and used for the activation data decryption.</li>
     *  <li>The client private key used for session key calculation. {@link DSAPPConstants_PRIVATE_KEY_LENGTH} hexadecimal string. Must be stored on the client side and used for the activation data decryption.</li>
     *  <li>The client nonce that will be verified against the one received from the server. {@link DSAPPConstants_NONCE_LENGTH} hexadecimal string. Must be stored on the client side and used for the activation data decryption.</li>
     * </ul>
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_ACTIVATION_PASSWORD_TOO_LONG}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void initializeRegistrationData(string activationPassword, InitializeRegistrationDataResponse& response);

    /**
     * The DIGIPASS activation data is protected by an asymmetric key encryption mechanism.<br/>
     * Prior to get the DIGIPASS activation data, the client application must provide the data required to protect the activation data:
     * <ul>
     *  <li>The client public key and nonce.</li>
     *  <li>The initial vector diversifying the encryption.</li>
     * </ul>
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param activationPassword Activation password. Alphanumeric string limited to {@link DSAPPConstants_SHARED_DATA_MAX_LENGTH} characters.
     * @param response A response object that contains:
     * <ul>
     *  <li>The encrypted concatenation of the client public key and the client nonce. ({@link DSAPPConstants_PUBLIC_KEY_LENGTH} + {@link DSAPPConstants_NONCE_LENGTH}) hexadecimal characters. Must be sent to the server.</li>
     *  <li>The initial vector used for public key encryption. {@link DSAPPConstants_INITIAL_VECTOR_LENGTH} hexadecimal string. Must be sent to the server.</li>
     *  <li>The key derived from the activation password. {@link DSAPPConstants_CHS_KEY_LENGTH} hexadecimal string. Must be stored on the client side and used for the activation data decryption.</li>
     *  <li>The client private key used for session key calculation. {@link DSAPPConstants_PRIVATE_KEY_LENGTH} hexadecimal string. Must be stored on the client side and used for the activation data decryption.</li>
     *  <li>The client nonce that will be verified against the one received from the server. {@link DSAPPConstants_NONCE_LENGTH} hexadecimal string. Must be stored on the client side and used for the activation data decryption.</li>
     * </ul>
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_ACTIVATION_PASSWORD_TOO_LONG}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void initializeRegistrationDataV1(string activationPassword, InitializeRegistrationDataResponse& response);

    /**
     * On client side, the activation data are received encrypted with the session key.<br/>
     * It must be decrypted to be provided to the DIGIPASS SDK for the DIGIPASS instance activation.<br/>
     * The DSAPP library will verify the integrity of the decrypted data.<br/>
     * CAUTION: Since DSAPP SDK 4.4, it is preferable to use {@link DSAPPClient_generateSessionKey} and {@link DSAPPClient_decryptData}.<br/>
     * NOTE: DSAPPErrorCodes#CHECK_NONCE_ERROR error occured when the decryption of activation data is not done correctly. 
     * It might be due to a different shared secret between server and client.<br/>
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param chsKey Key derived from the activation password. Must be a {@link DSAPPConstants_CHS_KEY_LENGTH} hexadecimal string.
     * @param clientPrivateKey Client private key used for session key calculation. Must be a {@link DSAPPConstants_PRIVATE_KEY_LENGTH} hexadecimal string.
     * @param encryptedServerPublicKey Server public key encrypted with chsKey. Must be a {@link DSAPPConstants_PUBLIC_KEY_LENGTH} hexadecimal string.
     * @param encryptedNonces Concatenation of the server and client nonces encrypted with the chsKey. Must be a {@link DSAPPConstants_ENCRYPTED_NONCES_LENGTH} hexadecimal string.
     * @param xfad DIGIPASS activation data encrypted with the session key. Must be an hexadecimal string.
     * @param xerc Event reactivation counter encrypted with the session key. Must be an hexadecimal string.
     * @param clientNonce Client nonce. Must be a {@link DSAPPConstants_NONCE_LENGTH} hexadecimal string.
     * @param serverInitialVector Server initial vector used for data decryption. Must be a {@link DSAPPConstants_INITIAL_VECTOR_LENGTH} hexadecimal string.
     * @param response A response object that contains:
     * <ul>
     *  <li>The DIGIPASS activation data. Must be used to activate the DIGIPASS.</li>
     *  <li>The Event reactivation counter. Must be used to activate the DIGIPASS.</li>
     *  <li>The server nonce encrypted with the session key. {@link DSAPPConstants_ENCRYPTED_SERVER_NONCE_LENGTH} hexadecimal string. Must be sent to the server for the server nonce validation.</li>
     *  <li>The client initial vector used for decryption on server side. {@link DSAPPConstants_INITIAL_VECTOR_LENGTH} hexadecimal string. Must be sent to the server for the server nonce validation.</li>
     * </ul>
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_CHS_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_CHS_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_CHS_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_PRIVATE_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_PRIVATE_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_PRIVATE_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_SERVER_PUBLIC_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_SERVER_PUBLIC_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_SERVER_PUBLIC_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_NONCES_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_NONCES_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_ENCRYPTED_NONCES_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_NONCE_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_NONCE_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_CLIENT_NONCE_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_XFAD_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_XFAD_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_XERC_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SERVER_INITIAL_VECTOR_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SERVER_INITIAL_VECTOR_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SERVER_INITIAL_VECTOR_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_CHECK_NONCE_ERROR}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     **/
    static void decryptActivationData(string chsKey, string clientPrivateKey, string encryptedServerPublicKey,
            string encryptedNonces, string xfad, string xerc, string clientNonce, string serverInitialVector,
            DecryptActivationDataResponse& response);

    /**
     * Validates the checksum of a shared data (activation password or authorization code).
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param sharedData Shared data. Alphanumeric string, from {@link DSAPPConstants_SHARED_DATA_MIN_LENGTH} to {@link DSAPPConstants_SHARED_DATA_MAX_LENGTH} characters.
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SHARED_DATA_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SHARED_DATA_LENGTH_TOO_SHORT}</li>
     *  <li>{@link DSAPPErrorCodes_SHARED_DATA_LENGTH_TOO_LONG}</li>
     *  <li>{@link DSAPPErrorCodes_CHECKSUM_VALIDATION_FAILED}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void validateSharedDataChecksum(string sharedData);

    /**
     * Validates the checksum of a shared data (activation password or authorization code).
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param sharedData Shared data. Alphanumeric string, from {@link DSAPPConstants_SHARED_DATA_MIN_LENGTH} to {@link DSAPPConstants_SHARED_DATA_MAX_LENGTH} characters.
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SHARED_DATA_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SHARED_DATA_LENGTH_TOO_SHORT}</li>
     *  <li>{@link DSAPPErrorCodes_SHARED_DATA_LENGTH_TOO_LONG}</li>
     *  <li>{@link DSAPPErrorCodes_CHECKSUM_VALIDATION_FAILED}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void validateSharedDataChecksumV1(string sharedData);
    /**
     * Validates the checksum of a shared data (activation password or authorization code).
     *
     * @deprecated Use the SRP version of the API which provides an enhanced security mechanism. {@link DSAPPClient#validateSRPUserPasswordChecksum}, {@link DSAPPClient#generateSRPClientEphemeralKey}, {@link DSAPPClient#generateSRPSessionKey}, {@link DSAPPClient#verifySRPServerEvidenceMessage} and {@link DSAPPClient#decryptSRPData} must be used.
     *
     * @param sharedData Shared data. Alphanumeric string, from {@link DSAPPConstants_SHARED_DATA_MIN_LENGTH} to {@link DSAPPConstants_SHARED_DATA_MAX_LENGTH} characters.
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SHARED_DATA_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SHARED_DATA_LENGTH_TOO_SHORT}</li>
     *  <li>{@link DSAPPErrorCodes_SHARED_DATA_LENGTH_TOO_LONG}</li>
     *  <li>{@link DSAPPErrorCodes_CHECKSUM_VALIDATION_FAILED}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void validateSharedDataChecksumV2(string sharedData);

    /**
     * Validates the checksum of the user password used in SRP protocol.
     *
     * @param userPassword User password. Alphanumeric string, from {@link DSAPPConstants_SRP_PWD_MIN_LENGTH} to {@link DSAPPConstants_SRP_PWD_MAX_LENGTH} characters.
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SRP_PASSWORD_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_PASSWORD_INCORRECT_LENGTH}</li>
	 *  <li>{@link DSAPPErrorCodes_CHECKSUM_VALIDATION_FAILED}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void validateSRPUserPasswordChecksum(string userPassword);

    /**
     * Generates the SRP client public and private ephemeral keys.
     *
     * @param response A response object that contains:
     * <ul>
     *  <li>The client public ephemeral key. A {@link DSAPPConstants_SRP_EPHEMERAL_KEY_MAX_LENGTH} max length hexadecimal string. Must be sent to the server. Must be stored on the client side and used for SRP session key generation.</li>
     *  <li>The client private ephemeral key. A {@link DSAPPConstants_SRP_EPHEMERAL_KEY_MAX_LENGTH} max length hexadecimal string. Must be stored on the client side and used for SRP session key generation.</li>
     * </ul>
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void generateSRPClientEphemeralKey(SRPClientEphemeralKeyResponse& response);
    
    /**
     * Generates the SRP session key and the client evidence message.
     *
     * @param clientEphemeralPublicKey Client ephemeral public key. Hexadecimal string, maximum {@link DSAPPConstants_SRP_EPHEMERAL_KEY_MAX_LENGTH} characters. Has been calculated by generateSRPClientEphemeralKey method.
     * @param clientEphemeralPrivateKey Client ephemeral private key. Hexadecimal string, maximum {@link DSAPPConstants_SRP_EPHEMERAL_KEY_MAX_LENGTH} characters. Has been calculated by generateSRPClientEphemeralKey method.
     * @param serverEphemeralPublicKey Server ephemeral public key. Hexadecimal string, maximum {@link DSAPPConstants_SRP_EPHEMERAL_KEY_MAX_LENGTH} characters. Received from the server.
     * @param userIdentity User identity. String, from {@link DSAPPConstants_SRP_USER_ID_MIN_LENGTH} to {@link DSAPPConstants_SRP_USER_ID_MAX_LENGTH} characters.
     * @param userPassword User password. Alphanumeric string, from {@link DSAPPConstants_SRP_PWD_MIN_LENGTH} to {@link DSAPPConstants_SRP_PWD_MAX_LENGTH} characters.
     * @param salt Salt. Hexadecimal string of length {@link DSAPPConstants_SRP_SALT_LENGTH}. Received from the server.
     * @param response A response object that contains:
     * <ul>
     *  <li>The session key. A {@link DSAPPConstants_SRP_SESSION_KEY_LENGTH} length hexadecimal string. Must be stored on the client side and used for SRP server evidence message validation and SRP decryption.</li>
     *  <li>The client evidence message. A {@link DSAPPConstants_SRP_EVIDENCE_MESSAGE_LENGTH} length hexadecimal string. Must be sent to the server. Must be stored on the client side and used for SRP server evidence message validation.</li>
     * </ul>
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_EPHEMERAL_KEY_INVALID}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_EPHEMERAL_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_EPHEMERAL_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_EPHEMERAL_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_PRIVATE_KEY_INVALID}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_PRIVATE_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_PRIVATE_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_PRIVATE_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SERVER_EPHEMERAL_KEY_INVALID}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SERVER_EPHEMERAL_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SERVER_EPHEMERAL_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SERVER_EPHEMERAL_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_USER_ID_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_USER_ID_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SALT_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SALT_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SALT_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_PASSWORD_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_PASSWORD_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void generateSRPSessionKey(string clientEphemeralPublicKey, string clientEphemeralPrivateKey, 
        string serverEphemeralPublicKey, string userIdentity, string userPassword, string salt, SRPSessionKeyResponse& response);
    
    /**
     * Verifies the server evidence message
     *
     * @param clientEphemeralPublicKey Client ephemeral public key. Hexadecimal string, maximum {@link DSAPPConstants_SRP_EPHEMERAL_KEY_MAX_LENGTH} characters. Has been calculated by generateSRPClientEphemeralKey method.
     * @param clientEvidenceMessage Client evidence message. Hexadecimal string of length {@link DSAPPConstants_SRP_EVIDENCE_MESSAGE_LENGTH}. Has been calculated by generateSRPSessionKey method.
     * @param serverEvidenceMessage Server evidence message. Hexadecimal string of length {@link DSAPPConstants_SRP_EVIDENCE_MESSAGE_LENGTH}. Has been received from server.
     * @param sessionKey Session key. Hexadecimal string of length {@link DSAPPConstants_SRP_SESSION_KEY_LENGTH}. Has been calculated by generateSRPSessionKey method.
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_EPHEMERAL_KEY_INVALID}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_EPHEMERAL_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_EPHEMERAL_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_EPHEMERAL_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_MESSAGE_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_MESSAGE_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_CLIENT_MESSAGE_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SERVER_MESSAGE_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SERVER_MESSAGE_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SERVER_MESSAGE_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SESSION_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SESSION_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SESSION_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_MESSAGE_VERIFICATION_FAILED}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void verifySRPServerEvidenceMessage(string clientEphemeralPublicKey, string clientEvidenceMessage, 
        string serverEvidenceMessage, string sessionKey);
    
    /**
     * Decrypts the SRP data.
     *
     * @param sessionKey Session key. Hexadecimal string of length {@link DSAPPConstants_SRP_SESSION_KEY_LENGTH}. Has been calculated by generateSRPSessionKey method.
     * @param encryptedData Encrypted data. Hexadecimal string. Has been received from server.
     * @param encryptionCounter Encryption counter. Hexadecimal string of length {@link DSAPPConstants_SRP_ENCRYPTION_COUNTER_LENGTH}. Has been received from server.
     * @param mac MAC. Hexadecimal string of length {@link DSAPPConstants_SRP_MAC_LENGTH}. Has been received from server.
     * @param decryptedData Decrypted data. byte array containing the decrypted data.
     * @param decryptedDataBufferLength Decrypted data buffer length. Address of a 32-bit word that contains on input the allocated size of the buffer and receives on * output the length of the decrypted data. If there is not enough space in the buffer to store the decrypted data, the function returns 
	 * {@link DSAPPErrorCodes_DECRYPTED_DATA_LENGTH_TOO_SMALL} and sets decryptedDataBufferLength with the size required to hold in the decrypted data. 
	 * It should be at least half the value of encryptedData. After the decryption, this value is set to exactly half the value of encryptedData.
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SRP_SESSION_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SESSION_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SESSION_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_ENCRYPTED_DATA_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_ENCRYPTED_DATA_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_ENCRYPTION_COUNTER_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_ENCRYPTION_COUNTER_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_ENCRYPTION_COUNTER_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_MAC_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_MAC_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_MAC_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_MAC_VERIFICATION_FAILED}</li>
	 *  <li>{@link DSAPPErrorCodes_DECRYPTED_DATA_NULL}</li>
     *  <li>{@link DSAPPErrorCodes_DECRYPTED_DATA_LENGTH_NULL}</li>
     *  <li>{@link DSAPPErrorCodes_DECRYPTED_DATA_LENGTH_TOO_SMALL}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     * </ul>
     */
    static void decryptSRPData(string sessionKey, string encryptedData, string encryptionCounter, string mac,
            byte* decryptedData, long* decryptedDataBufferLength);

    /**
     * Derives the session key, computes the MAC of the input data (HMAC-SHA-256) and verifies the given MAC.
     * @param sessionKey Session key. Hexadecimal string of length {@link DSAPPConstants_SRP_SESSION_KEY_LENGTH}. Has been calculated by generateSRPSessionKey method.
     * @param data Input data to check. Byte array containing the data.
	 * @param dataLength The size of the input data. Must be different of 0.
     * @param mac MAC of the input data. Hexadecimal string of length {@link DSAPPConstants_SRP_MAC_LENGTH}.
     * @throws DSAPPException Exception raised if there is an error during the process. The following codes can be returned:
     * <ul>
     *  <li>{@link DSAPPErrorCodes_SRP_SESSION_KEY_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SESSION_KEY_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_SESSION_KEY_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_DATA_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_MAC_NULL_OR_EMPTY}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_MAC_INCORRECT_LENGTH}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_MAC_INCORRECT_FORMAT}</li>
     *  <li>{@link DSAPPErrorCodes_SRP_MAC_VERIFICATION_FAILED}</li>
     *  <li>{@link DSAPPErrorCodes_INTERNAL_ERROR}</li>
     *  <li>{@link DSAPPErrorCodes_DECRYPTED_DATA_INCORRECT_FORMAT}</li>
     * </ul>
     */
    static void verifySRPMAC(string sessionKey, byte* data, long dataLength, string mac);
};

#endif

/*!
 * \mainpage DIGIPASS Software Advanced Provisioning Protocol - Programmer documentation
 * \brief This documentation describes the methods and the constants provided by the DSAPP client C++ library.<br/>
 * <br/>
 * They are exposed by the DSAPPClient class.<br/>
 * <br/>
 * @OneSpanCopyright
 * @version 4.29.0
 */
