// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef MSSSECURESTORAGE_SWIFT_H
#define MSSSECURESTORAGE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MSSSecureStorage",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;
@class NSData;

/// This class provides mechanisms to create a storage, add and remove values, write and delete storage file
SWIFT_CLASS("_TtC16MSSSecureStorage16SecureStorageSDK")
@interface SecureStorageSDK : NSObject
/// Returns the current version of SecureStorageSDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull frameworkVersion;)
+ (NSString * _Nonnull)frameworkVersion SWIFT_WARN_UNUSED_RESULT;
/// Returns True if the Secure Storage SDK supports the hardware protection.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isProtectedBySecureHardware;)
+ (BOOL)isProtectedBySecureHardware SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new storage instance by reading an existing storage if available.
/// \param fileName Storage file name. Must not be nil nor empty, the max length is 100 and it can only contain alphanumeric characters (along with “-”, “_” and “.”)
///
/// \param fingerprint Data used to secure the storage. It should be a device-dependent data. Can be nil.
///
/// \param iterationNumber Indicates the power of the storage encryption. Once set must not be changed. Must be greater than 0.
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when initializing the SecureStorageSDK instance.
///
/// returns:
/// A SecureStorageSDK instance
- (nullable instancetype)initWithFileName:(NSString * _Nonnull)fileName fingerprint:(NSString * _Nullable)fingerprint iterationNumber:(int32_t)iterationNumber error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,deprecated=13.0,message="iterationNumber is not needed anymore");
/// Initializes a new storage instance by reading an existing storage if available.
/// \param fileName Storage file name. Must not be nil nor empty, the max length is 100 and it can only contain alphanumeric characters (along with “-”, “_” and “.”)
///
/// \param fingerprint Data used to secure the storage. It should be a device-dependent data. Can be nil.
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when initializing the SecureStorageSDK instance.
///
/// returns:
/// A SecureStorageSDK instance
- (nullable instancetype)initWithFileName:(NSString * _Nonnull)fileName fingerprint:(NSString * _Nullable)fingerprint error:(NSError * _Nullable * _Nullable)error;
/// Writes the storage in the device’s persistent memory.
/// \param fingerPrint Used to generate an encryption key. Can be null.
///
/// \param iterationNumber Number of loops used to calculate the encryption key. Must be greater than 0.
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when writing data on the device’s persistent storage.
- (BOOL)writeWithFingerPrint:(NSString * _Nullable)fingerPrint iterationNumber:(int32_t)iterationNumber error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=13.0,message="iterationNumber not necessary anymore");
/// Writes the storage in the device’s persistent memory.
/// \param fingerPrint Used to generate an encryption key. Can be null.
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when writing data on the device’s persistent storage.
- (BOOL)writeWithFingerPrint:(NSString * _Nullable)fingerPrint error:(NSError * _Nullable * _Nullable)error;
/// Puts a string into the storage. If the key already exists, the value is updated.
/// \param value String to store. Will be stored UTF8 encoded.
///
/// \param key Used to identify a storage value. Must not be nil nor empty, the max length is 100 and it can only contain alphanumeric characters (along wit “-“, “_” and “.”)
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when adding a value to the storage.
- (BOOL)putWithString:(NSString * _Nonnull)string key:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Puts a bytes array into the storage. If the key already exists, the value is updated.
/// \param value Bytes array to store.
///
/// \param key Used to identify a storage value. Must not be nil nor empty, the max length is 100 and it can only contain alphanumeric characters (along wit “-“, “_” and “.”)
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when adding a value to the storage.
- (BOOL)putWithData:(NSData * _Nonnull)data key:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Removes a value from the storage.
/// \param key Key to retrieve value. Must not be empty, the max length is 100.
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when removing a value from the storage.
- (BOOL)removeValueWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Gets a string from the storage.
/// \param key Key to retrieve value. Must not be empty, the max length is 100
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when getting a value from the storage.
///
/// returns:
/// The string value for to the provided key.
- (NSString * _Nullable)getStringWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Gets a bytes array from the storage.
/// \param key Key to retrieve value. Must not be empty, the max length is 100.
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when getting a value from the storage.
///
/// returns:
/// The bytes array value for to the provided key.
- (NSData * _Nullable)getDataWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Gets all the data from the storage.
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when getting all data from the storage.
///
/// returns:
/// The data contained in the storage in form of a dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getAllAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Deletes a Secure Storage instance.
/// \param fileName Name of the data file. Must not be empty, the max length is 100.
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when deleting a Secure Storage instance.
+ (BOOL)deleteWithFileName:(NSString * _Nonnull)fileName error:(NSError * _Nullable * _Nullable)error;
/// Returns true if this storage contains a mapping for the specified key
/// \param key The key whose presence in this storage is to be tested. Must not be empty, the max length is 100.
///
///
/// throws:
/// An error of type <code>SecureStorageError</code> If an error occurs when checking for the key.
///
/// returns:
/// True if this storage contains a mapping for the specified key
- (BOOL)containsWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Removes all of the data from this storage. The storage will be empty after this call returns.
- (BOOL)clearAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Gets the number of entries in this storage
///
/// returns:
/// The number of entries in this storage
- (NSInteger)count SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
